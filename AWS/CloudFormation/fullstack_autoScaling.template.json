{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloud Formation - Full Stack with VPC, public and private subnets in multiple AZ, InternetGateway,  ec2 instances, MySQL DB, Loadbalancer, AutoScalingGroup",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "CidrBlock"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "InstanceType",
                        "InstanceName",
                        "Environment"
                    ]
                },
                {
                    "Label": {
                        "default": "RDS Instance Configuration"
                    },
                    "Parameters": [
                        "DBInstanceId",
                        "DBName",
                        "DBEngine",
                        "DBUserName",
                        "DBUserPass",
                        "DBStorage",
                        "DBInstanceClass"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "CidrBlock": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.10.12.0/24",
            "Description": "VPC CIDR Block (eg 10.0.0.0/16)",
            "Type": "String"
        },
        "azAPrivateSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Description": "VPC CIDR Block for the AZ-A Private Subnet (eg 10.0.0.0/24)",
            "Type": "String"
        },
        "azAWebSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Description": "VPC CIDR Block for the AZ-A Web Subnet(eg 10.0.0.0/24)",
            "Type": "String"
        },
        "azASpareSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Description": "VPC CIDR Block for the AZ-A Spare Subnet (eg 10.0.0.0/24)",
            "Type": "String"
        },
        "azBPrivateSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Description": "VPC CIDR Block for the AZ-B Private Subnet(eg 10.0.0.0/24)",
            "Type": "String"
        },
        "azBWebSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Description": "VPC CIDR Block for the AZ-B Web Subnet (eg 10.0.0.0/24)",
            "Type": "String"
        },
        "azBSpareSubnetCIDR": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.10.12.0/25",
            "Description": "VPC CIDR Block for the AZ-B Spare Subnet (eg 10.0.0.0/24)",
            "Type": "String"
        },
        "webSecGrpTCPIP": {
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Description": "VPC CIDR Block for TCP connection into web security group",
            "Type": "String"
        },
        "InstanceName": {
            "Type": "String"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "region-virginia-training-demo-key",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "Environment": {
            "Description": "Application environment for which this network is being created. e.g. Development/Production.",
            "Type": "String",
            "Default": "UAT",
            "AllowedValues": [
                "UAT",
                "DEV",
                "QA",
                "PROD"
            ]
        },
        "InstancePublicIP": {
            "Description": "Specifies whether to launch instances with public IP addresses in your VPC.",
            "Type": "String",
            "Default": "True",
            "AllowedValues": [
                "False",
                "True"
            ]
        },
        "InstanceAMI": {
            "Description": "AMI for use with the EC2 instances",
            "Type": "String",
            "Default": "ami-b63769a1",
            "AllowedValues": [
                "ami-b63769a1",
                "ami-cdbdd7a2"
            ]
        },
        "DBInstanceId": {
            "Description": "The RDS DB Instance Identifier",
            "Type": "String",
            "Default": "rds-mysql-inst01",
            "ConstraintDescription": "Must be a valid RDS instance ID"
        },
        "DBName": {
            "Description": "The RDS DB Instance Name",
            "Type": "String",
            "Default": "wpdb01",
            "ConstraintDescription": "No Special Characters"
        },
        "DBEngine": {
            "Description": "The RDS DB Engine Type",
            "Type": "String",
            "Default": "MySQL",
            "ConstraintDescription": "Must be a valid RDS Engine Type"
        },
        "DBUserName": {
            "Description": "The RDS DB Instance UserName",
            "Type": "String",
            "Default": "dbuser",
            "ConstraintDescription": "No Special Characters"
        },
        "DBUserPass": {
            "Description": "The RDS DB Instance Password",
            "Type": "String",
            "Default": "dbuserpass",
            "ConstraintDescription": "Choose a strong password"
        },
        "DBStorage": {
            "Description": "The RDS DB Size in GB",
            "Type": "String",
            "Default": "20",
            "ConstraintDescription": "Storage in GBs"
        },
        "DBInstanceClass": {
            "Description": "The RDS DB Instance Type",
            "Type": "String",
            "Default": "db.t2.micro",
            "ConstraintDescription": "Must be a valid RDS instance Class"
        },
        "webLoadBalancerName": {
            "Description": "web load balancer name",
            "Type": "String",
            "Default": "",
            "ConstraintDescription": "web load balancer name"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "64": "ami-b63769a1"
            },
            "ap-south-1": {
                "64": "ami-cdbdd7a2"
            }
        }
    },
    "Resources": {
        "webAppVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "CidrBlock"
                },
                "EnableDnsSupport": "True",
                "EnableDnsHostnames": "True",
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "webAppVPCIntGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "InternetGatewayId": {
                    "Ref": "webAppVPCIntGateway"
                }
            }
        },
        "azAPrivateSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "CidrBlock": {
                    "Ref": "azAPrivateSubnetCIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "azAWebSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "CidrBlock": {
                    "Ref": "azAWebSubnetCIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "azASpareSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "CidrBlock": {
                    "Ref": "azASpareSubnetCIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "azBPrivateSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "CidrBlock": {
                    "Ref": "azBPrivateSubnetCIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "azBWebSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "CidrBlock": {
                    "Ref": "azBWebSubnetCIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "azBSpareSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "CidrBlock": {
                    "Ref": "azBSpareSubnetCIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "webAppVPCRouteTbl": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "routeForInternet": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "webAppVPCIntGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "webAppVPCRouteTbl"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "webAppVPCIntGateway"
                }
            }
        },
        "azAwebSubnetRouteTblAssn": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "azAWebSubnet"
                },
                "RouteTableId": {
                    "Ref": "webAppVPCRouteTbl"
                }
            }
        },
        "azBWebSubnetRouteTblAssn": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "azBWebSubnet"
                },
                "RouteTableId": {
                    "Ref": "webAppVPCRouteTbl"
                }
            }
        },
        "LoadBalancerSecGrp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "The Security Group for the Elastic Load Balancers",
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "webSecGrp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for Web servers",
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "webSecGrpInBoundRule1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "webSecGrpTCPIP"
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "webSecGrp",
                        "GroupId"
                    ]
                }
            }
        },
        "webSecGrpInBoundRule2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Fn::GetAtt": [
                        "webSecGrp",
                        "GroupId"
                    ]
                }
            }
        },
        "webSecGrpInBoundRule3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Fn::GetAtt": [
                        "webSecGrp",
                        "GroupId"
                    ]
                }
            }
        },
        "dbSecGrp": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for Database servers",
                "VpcId": {
                    "Ref": "webAppVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "dbSecGrpInBoundRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "tcp",
                "FromPort": "3306",
                "ToPort": "3306",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "webSecGrp",
                        "GroupId"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "dbSecGrp",
                        "GroupId"
                    ]
                }
            }
        },
        "dbSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "The group of subnets where RDS Instance(s) will be hosted",
                "SubnetIds": [
                    {
                        "Ref": "azAPrivateSubnet"
                    },
                    {
                        "Ref": "azBPrivateSubnet"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "dbMySQLCustomParameterGroup": {
            "Type": "AWS::RDS::DBParameterGroup",
            "Properties": {
                "Description": "Custom Parameters for the MySQL DB Instance",
                "Family": "MySQL5.6",
                "Parameters": {
                    "general_log": "ON",
                    "time_zone": "America/Los_Angeles",
                    "autocommit": 1
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "rdsInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceIdentifier": {
                    "Ref": "DBInstanceId"
                },
                "DBName": {
                    "Ref": "DBName"
                },
                "Engine": {
                    "Ref": "DBEngine"
                },
                "MasterUsername": {
                    "Ref": "DBUserName"
                },
                "MasterUserPassword": {
                    "Ref": "DBUserPass"
                },
                "AllocatedStorage": {
                    "Ref": "DBStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "VPCSecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "dbSecGrp",
                            "GroupId"
                        ]
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "dbSubnetGroup"
                },
                "DBParameterGroupName": {
                    "Ref": "dbMySQLCustomParameterGroup"
                },
                "BackupRetentionPeriod": "3",
                "Port": "3306",
                "MultiAZ": "False",
                "AutoMinorVersionUpgrade": "False",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Role",
                        "Value": "Primary"
                    }
                ]
            },
            "DependsOn": [
                "dbMySQLCustomParameterGroup",
                "dbSubnetGroup",
                "dbSecGrp"
            ],
            "DeletionPolicy": "Delete"
        },
        "webLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "azAWebSubnet"
                    },
                    {
                        "Ref": "azBWebSubnet"
                    }
                ],
                "LoadBalancerName": "kum-webLoadBalancer",
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "HTTP:",
                                "80",
                                "/"
                            ]
                        ]
                    },
                    "Timeout": "5",
                    "UnhealthyThreshold": "5"
                },
                "SecurityGroups": [
                    {
                        "Ref": "webSecGrp"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ],
                "Scheme": "internet-facing"
            },
            "DependsOn": "webAppVPCIntGateway"
        },
        "webServerLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Webserver running Wordpress Application",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "wp_install_configure": [
                            "install_wordpress"
                        ]
                    },
                    "install_wordpress": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": [],
                                "php-mysql": [],
                                "mysql": []
                            }
                        },
                        "sources": {
                            "/var/www/html": "https://wordpress.org/latest.tar.gz"
                        },
                        "files": {
                            "/var/www/html/info.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<?php \n",
                                            "phpinfo(); \n",
                                            "?> \n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "apache",
                                "group": "apache"
                            },
                            "/tmp/quickConfig": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -ex \n",
                                            "groupadd www \n",
                                            "chown -R root:www /var/www \n",
                                            "chmod 2775 /var/www \n",
                                            "find /var/www -type d -exec chmod 2775 {} + \n",
                                            "find /var/www -type f -exec chmod 0664 {} + \n",
                                            "# Configure SELinux to allow make network connection to database \n",
                                            "# setsebool -P httpd_can_network_connect=1 \n",
                                            "# setsebool httpd_can_network_connect_db on \n"
                                        ]
                                    ]
                                },
                                "mode": "000744",
                                "owner": "apache",
                                "group": "apache"
                            }
                        },
                        "commands": {
                            "01_config": {
                                "command": "/tmp/quickConfig",
                                "cwd": "/var/www"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "EbsOptimized": false,
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        64
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": {
                    "Ref": "webSecGrp"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "AssociatePublicIpAddress": {
                    "Ref": "InstancePublicIP"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex \n",
                                "# Install the AWS CloudFormation helper scripts and then run the cfn-init helper script  \n",
                                "yum update -y aws-cfn-bootstrap \n",
                                "/opt/aws/bin/cfn-init -v --configsets wp_install_configure --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource webServerLaunchConfig --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource AutoScalingGroup --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LoadBalancerNames": [
                    {
                        "Ref": "webLoadBalancer"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "webServerLaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "2",
                "DesiredCapacity": "2",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "azAWebSubnet"
                    },
                    {
                        "Ref": "azBWebSubnet"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DependsOn": "webAppVPCIntGateway"
        }
    },
    "Outputs": {
        "URL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "webLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            },
            "Description": "Newly created application URL"
        },
        "RDSDatabaseEndpoint": {
            "Description": "RDS DB Endpoint Details",
            "Value": {
                "Fn::GetAtt": [
                    "rdsInstance",
                    "Endpoint.Address"
                ]
            }
        }
    }
}